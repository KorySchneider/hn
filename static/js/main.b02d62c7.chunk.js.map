{"version":3,"sources":["redux/actions.js","components/Menu.js","components/Story.js","components/App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["UPDATE_ID_CACHE","UPDATE_SECTION","UPDATE_VISIBLE_STORIES","UPDATE_VISIBLE_VALID","UPDATE_NEXT_PAGE_BUFFER","UPDATE_PAGE_INDEX","actionCreators","updateSection","section","type","style","margin","padding","connect","state","handleMenuClick","event","currentTarget","id","Paper","elevation","align","Button","onClick","e","visible","visibleValid","data","timeout","useState","expanded","setExpanded","Slide","direction","in","mountOnEnter","unmountOnExit","key","title","transitionDelay","Card","url","window","open","text","cursor","CardContent","Typography","variant","substring","score","pageSize","updateIdCache","ids","updateVisibleStories","stories","updateVisibleValid","valid","updateNextPageBuffer","updatePageIndex","index","visibleStories","idCache","nextPageBuffer","pageIndex","fetchItem","a","fetch","response","json","result","useEffect","results","items","i","item","push","fetchStories","Container","maxWidth","map","Boolean","location","hostname","match","rootReducer","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b02d62c7.chunk.js","sourcesContent":["export const UPDATE_ID_CACHE = 'UPDATE_ID_CACHE';\nexport const UPDATE_SECTION = 'UPDATE_SECTION';\nexport const UPDATE_VISIBLE_STORIES = 'UPDATE_VISIBLE_STORIES';\nexport const UPDATE_VISIBLE_VALID = 'UPDATE_VISIBLE_VALID';\nexport const UPDATE_NEXT_PAGE_BUFFER = 'UPDATE_NEXT_PAGE_BUFFER';\nexport const UPDATE_PAGE_INDEX = 'UPDATE_PAGE_INDEX';\n\nexport function updateIdCache(ids) {\n  return {\n    type: UPDATE_ID_CACHE,\n    ids: ids,\n  }\n}\n\nexport function updateSection(section) {\n  return {\n    type: UPDATE_SECTION,\n    section: section,\n  }\n}\n\nexport function updateVisibleStories(stories) {\n  return {\n    type: UPDATE_VISIBLE_STORIES,\n    stories: stories,\n  }\n}\n\nexport function updateVisibleValid(valid) {\n  return {\n    type: UPDATE_VISIBLE_VALID,\n    valid: valid,\n  }\n}\n\nexport function updateNextPageBuffer(stories) {\n  return {\n    type: UPDATE_NEXT_PAGE_BUFFER,\n    stories: stories,\n  }\n}\n\nexport function updatePageIndex(index) {\n  return {\n    type: UPDATE_PAGE_INDEX,\n    index: index,\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateSection } from '../redux/actions';\n\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst mapState = state => ({\n  section: state.section,\n});\n\nconst actionCreators = {\n  updateSection,\n};\n\nconst style = {\n  margin: '2em auto',\n  padding: '0.5em',\n};\n\nfunction Menu({ updateSection }) {\n\n  function handleMenuClick(event) {\n    updateSection(event.currentTarget.id);\n  }\n\n  return (\n    <Paper style={style} elevation={2} align='center'>\n      <Button id='top' onClick={e => handleMenuClick(e)}>Top</Button>\n      <Button id='new' onClick={e => handleMenuClick(e)}>New</Button>\n      <Button id='best' onClick={e => handleMenuClick(e)}>Best</Button>\n      <Button id='ask' onClick={e => handleMenuClick(e)}>Ask</Button>\n      <Button id='show' onClick={e => handleMenuClick(e)}>Show</Button>\n      <Button id='job' onClick={e => handleMenuClick(e)}>Jobs</Button>\n    </Paper>\n  )\n}\n\nexport default connect(mapState, actionCreators)(Menu);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport Slide from '@material-ui/core/Slide';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst mapState = state => ({\n  visible: state.visibleValid,\n});\n\nfunction Story({ data, timeout, visible }) {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleClick = () => {\n    if (data.url) window.open(data.url);\n    if (data.text) setExpanded(expanded => !expanded);\n  }\n\n  return (\n    <Slide\n      direction='right'\n      in={visible}\n      mountOnEnter\n      unmountOnExit\n      key={data.title}\n      style={{ transitionDelay: `${timeout}ms` }}\n    >\n      <Card\n        onClick={handleClick}\n        style={{\n          margin: '2em auto',\n          cursor: 'pointer',\n        }}\n      >\n        <CardContent>\n          <Typography variant='h5'>\n            {data.title}\n          </Typography>\n          <Typography>\n            {expanded && data.text}\n            {!expanded && data.text &&\n              data.text.substring(0, 80) + '...'\n            }\n          </Typography>\n          <Typography>\n            {data.score}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Slide>\n  )\n}\n\nexport default connect(mapState)(Story);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  updateIdCache,\n  updateVisibleStories,\n  updateVisibleValid,\n  updateNextPageBuffer,\n  updatePageIndex,\n} from '../redux/actions';\n\nimport Menu from './Menu';\nimport Story from './Story';\n\nimport Container from '@material-ui/core/Container';\n\nconst url = 'https://hacker-news.firebaseio.com/v0';\nconst pageSize = 20;\n\nconst mapState = state => ({\n  section: state.section,\n  visibleStories: state.visibleStories,\n  idCache: state.idCache,\n  nextPageBuffer: state.nextPageBuffer,\n  pageIndex: state.pageIndex,\n});\n\nconst actionCreators = {\n  updateIdCache,\n  updateVisibleStories,\n  updateVisibleValid,\n  updateNextPageBuffer,\n  updatePageIndex,\n}\n\nfunction App({\n  visibleStories,\n  updateVisibleStories,\n  updateVisibleValid,\n  idCache,\n  updateIdCache,\n  nextPageBuffer,\n  updateNextPageBuffer,\n  section,\n  pageIndex,\n}) {\n\n  async function fetchItem(id) {\n    const response = await fetch(`${url}/item/${id}.json`);\n    const result = await response.json();\n    return result;\n  }\n\n  useEffect(() => {\n    async function fetchStories() {\n      updateVisibleValid(false);\n\n      const response = await fetch(url + `/${section}stories.json`);\n      const results = await response.json();\n\n      updateIdCache(results);\n\n      let items = [];\n      for (let i = pageIndex; i < pageSize; i++) {\n        const item = await fetchItem(results[i]);\n        items.push(item);\n      }\n      updateVisibleStories(items);\n      updateVisibleValid(true);\n    }\n    fetchStories();\n  }, [section, updateIdCache, updateVisibleStories, pageIndex])\n\n  return (\n    <Container maxWidth='md'>\n      {/* Menu */}\n      <Menu />\n\n      {/* Stories */}\n      {visibleStories.map((item, i) => (\n        <Story data={item} key={item.title} timeout={i * 50} />\n      ))}\n    </Container>\n  );\n}\n\nexport default connect(mapState, actionCreators)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport {\n  UPDATE_ID_CACHE,\n  UPDATE_SECTION,\n  UPDATE_VISIBLE_STORIES,\n  UPDATE_VISIBLE_VALID,\n  UPDATE_NEXT_PAGE_BUFFER,\n  UPDATE_PAGE_INDEX,\n} from './actions';\n\nfunction idCache(state = [], action) {\n  switch(action.type) {\n    case UPDATE_ID_CACHE:\n      return action.ids;\n    default:\n      return state;\n  }\n}\n\nfunction section(state = 'top', action) {\n  switch(action.type) {\n    case UPDATE_SECTION:\n      return action.section;\n    default:\n      return state;\n  }\n}\n\nfunction visibleStories(state = [], action) {\n  switch(action.type) {\n    case UPDATE_VISIBLE_STORIES:\n      return action.stories;\n    default:\n      return state;\n  }\n}\n\nfunction visibleValid(state = true, action) {\n  switch(action.type) {\n    case UPDATE_VISIBLE_VALID:\n      return action.valid;\n    default:\n      return state;\n  }\n}\n\nfunction nextPageBuffer(state = [], action) {\n  switch(action.type) {\n    case UPDATE_NEXT_PAGE_BUFFER:\n      return action.stories;\n    default:\n      return state;\n  }\n}\n\nfunction pageIndex(state = 0, action) {\n  switch(action.type) {\n    case UPDATE_PAGE_INDEX:\n      return action.index;\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  idCache,\n  section,\n  visibleStories,\n  visibleValid,\n  nextPageBuffer,\n  pageIndex,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}